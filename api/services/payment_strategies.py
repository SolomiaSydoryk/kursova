from abc import ABC, abstractmethod
from django.db import transaction
from api.models import Reservation
from api.services.loyalty import LoyaltyService  # üîπ –Ω–æ–≤–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è


class PaymentStrategy(ABC):
    @abstractmethod
    def pay(self, reservation: Reservation, **kwargs):
        """–ü—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É. –ú–∞—î –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —ñ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ –Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–æ–Ω—É—Å–∏."""
        pass


class CardPaymentStrategy(PaymentStrategy):
    def pay(self, reservation: Reservation, **kwargs):
        with transaction.atomic():
            reservation.payment_status = Reservation.PAYMENT_PAID
            reservation.save(update_fields=['payment_status'])

            # –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–æ–Ω—É—Å–∏
            LoyaltyService.award_points_for_reservation(reservation)

        return f"–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é —É—Å–ø—ñ—à–Ω–∞. –°—É–º–∞: {reservation.price}"


class CashPaymentStrategy(PaymentStrategy):
    def pay(self, reservation: Reservation, **kwargs):
        with transaction.atomic():
            reservation.payment_status = Reservation.PAYMENT_PAID
            reservation.save(update_fields=['payment_status'])

            LoyaltyService.award_points_for_reservation(reservation)

        return f"–û–ø–ª–∞—Ç–∞ –≥–æ—Ç—ñ–≤–∫–æ—é —É—Å–ø—ñ—à–Ω–∞. –°—É–º–∞: {reservation.price}"


class BonusPaymentStrategy(PaymentStrategy):
    def pay(self, reservation: Reservation, points_to_use: int = 0, fallback="card", **kwargs):
        """
        –û–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–∞–º–∏:
        - points_to_use ‚Äî —Å–∫—ñ–ª—å–∫–∏ –±–æ–Ω—É—Å—ñ–≤ —Ö–æ—á–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        - fallback ‚Äî —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ –∑–∞–ª–∏—à–∫—É ('card' –∞–±–æ 'cash')
        """
        user = reservation.customer

        # —Å–ø–∏—Å—É—î–º–æ –±–æ–Ω—É—Å–∏ —á–µ—Ä–µ–∑ LoyaltyService
        result = LoyaltyService.redeem_points_for_reservation(user, reservation, points_to_use)
        remaining = result.get("remaining_price", reservation.price)

        # —è–∫—â–æ –ø—ñ—Å–ª—è –±–æ–Ω—É—Å—ñ–≤ –∑–∞–ª–∏—à–æ–∫ = 0 ‚Üí –ø–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞
        if remaining <= 0:
            reservation.payment_status = Reservation.PAYMENT_PAID
            reservation.save(update_fields=['payment_status'])

            LoyaltyService.award_points_for_reservation(reservation)
            return f"–û–ø–ª–∞—Ç–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é –±–æ–Ω—É—Å–∞–º–∏ —É—Å–ø—ñ—à–Ω–∞ (—Å–ø–∏—Å–∞–Ω–æ {points_to_use})."

        if fallback == "card":
            CardPaymentStrategy().pay(reservation)
            return f"–û–ø–ª–∞—Ç–∞ —á–∞—Å—Ç–∫–æ–≤–æ –±–æ–Ω—É—Å–∞–º–∏ ({points_to_use}) —ñ —Ä–µ—à—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é ({remaining})."
        elif fallback == "cash":
            CashPaymentStrategy().pay(reservation)
            return f"–û–ø–ª–∞—Ç–∞ —á–∞—Å—Ç–∫–æ–≤–æ –±–æ–Ω—É—Å–∞–º–∏ ({points_to_use}) —ñ —Ä–µ—à—Ç–∞ –≥–æ—Ç—ñ–≤–∫–æ—é ({remaining})."
        else:
            return f"–û–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–∞–º–∏ (—Å–ø–∏—Å–∞–Ω–æ {points_to_use}), –∑–∞–ª–∏—à–∏–ª–æ—Å—å {remaining} –¥–æ —Å–ø–ª–∞—Ç–∏."
